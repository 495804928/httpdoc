package io.httpdoc.objective.c;

import io.httpdoc.core.Category;
import io.httpdoc.core.Constant;
import io.httpdoc.core.Property;
import io.httpdoc.core.Schema;
import io.httpdoc.core.exception.SchemaDesignException;
import io.httpdoc.core.fragment.BlockFragment;
import io.httpdoc.core.fragment.CommentFragment;
import io.httpdoc.core.modeler.Archetype;
import io.httpdoc.core.modeler.Modeler;
import io.httpdoc.core.reflection.ParameterizedTypeImpl;
import io.httpdoc.core.supplier.Supplier;
import io.httpdoc.core.type.HDClass;
import io.httpdoc.core.type.HDType;
import io.httpdoc.objective.c.fragment.*;
import io.httpdoc.objective.c.type.ObjCClass;
import io.httpdoc.objective.c.type.ObjCType;

import java.lang.reflect.Modifier;
import java.util.*;

/**
 * 简单的模型师
 *
 * @author 杨昌沛 646742615@qq.com
 * @date 2018-05-18 11:15
 **/
public class ObjCMJExtensionModeler implements Modeler<ObjCClassFragment> {
    private final String prefix;
    private final ObjCEnumKind enumKind;

    public ObjCMJExtensionModeler(String prefix) {
        this(prefix, ObjCEnumKind.STRING);
    }

    public ObjCMJExtensionModeler(String prefix, ObjCEnumKind enumKind) {
        this.prefix = prefix;
        this.enumKind = enumKind;
    }

    @Override
    public Collection<ObjCClassFragment> design(Archetype archetype) throws SchemaDesignException {
        final String comment = "Generated By Httpdoc";
        final String pkgGenerated = archetype.getPkg();
        final boolean pkgForced = archetype.isPkgForced();
        final Supplier supplier = archetype.getSupplier();
        final Schema schema = archetype.getSchema();
        final String pkgTranslated = schema.getPkg();
        final String pkg = pkgForced || pkgTranslated == null ? pkgGenerated : pkgTranslated;
        final String name = schema.getName();
        switch (schema.getCategory()) {
            case ENUM: {
                Set<Constant> constants = schema.getConstants();
                switch (enumKind) {
                    case INTEGER: {
                        ObjCClassFragment interfase = new ObjCEnumFragment();
                        interfase.setPkg(pkg);
                        interfase.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                        HDClass clazz = new HDClass(HDClass.Category.ENUM, (pkg == null || pkg.isEmpty() ? "" : pkg + ".") + name);
                        ObjCClass objCClass = new ObjCClass(prefix, clazz);
                        interfase.setClazz(objCClass);
                        for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                            ObjCConstantFragment con = new ObjCConstantFragment(new CommentFragment(constant.getDescription()), constant.getName(), objCClass);
                            interfase.getConstantFragments().add(con);
                        }
                        return Collections.singleton(interfase);
                    }
                    case STRING: {
                        ObjCClassFragment define = new ObjCEnumFragment();
                        define.setPkg(pkg);
                        define.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                        HDClass interfase = new HDClass(HDClass.Category.INTERFACE, (pkg == null || pkg.isEmpty() ? "" : pkg + ".") + name);
                        ObjCClass intrClass = new ObjCClass(prefix, interfase);
                        define.setClazz(intrClass);

                        for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                            ObjCConstantFragment fragment = new ObjCConstantDefineFragment(new CommentFragment(constant.getDescription()), constant.getName(), intrClass);
                            define.getConstantFragments().add(fragment);
                        }

                        ObjCClassFragment assign = new ObjCEnumFragment();
                        assign.setPkg(pkg);
                        assign.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                        HDClass implementation = new HDClass(HDClass.Category.CLASS, (pkg == null || pkg.isEmpty() ? "" : pkg + ".") + name);
                        ObjCClass implClass = new ObjCClass(prefix, implementation);
                        assign.setClazz(implClass);
                        for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                            ObjCConstantFragment fragment = new ObjCConstantAssignFragment(new CommentFragment(constant.getDescription()), constant.getName(), implClass);
                            assign.getConstantFragments().add(fragment);
                        }

                        return Arrays.asList(define, assign);
                    }
                }
            }
            case OBJECT: {
                ObjCClassFragment interfase = new ObjCClassFragment();
                interfase.setPkg(pkg);
                interfase.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                interfase.setClazz(new ObjCClass(prefix, new HDClass(HDClass.Category.INTERFACE, (pkg == null || pkg.isEmpty() ? "" : pkg + ".") + name)));
                Schema superclass = schema.getSuperclass();
                interfase.setSuperclass(superclass != null && superclass.getCategory() == Category.OBJECT ? superclass.toType(pkgGenerated, pkgForced, supplier) : null);
                Map<String, Property> properties = schema.getProperties();
                for (Map.Entry<String, Property> entry : (properties != null ? properties.entrySet() : Collections.<Map.Entry<String, Property>>emptySet())) {
                    Property property = entry.getValue();
                    HDType type = property.getType().toType(pkgGenerated, pkgForced, supplier);
                    ObjCFieldFragment field = new ObjCFieldFragment();
                    field.setName(entry.getKey());
                    field.setType(type);
                    field.setCommentFragment(new CommentFragment(property.getDescription()));
                    interfase.getFieldFragments().add(field);
                }

                ObjCClassFragment implementation = new ObjCClassFragment();
                implementation.setPkg(pkg);
                implementation.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                implementation.setClazz(new ObjCClass(prefix, new HDClass(HDClass.Category.CLASS, (pkg == null || pkg.isEmpty() ? "" : pkg + ".") + name)));

                ObjCMethodFragment objectClassInArrayMethod = getObjectClassInArrayMethodFragment(pkgForced, supplier, pkg, properties);
                if (objectClassInArrayMethod != null) implementation.getMethodFragments().add(objectClassInArrayMethod);

                return Arrays.asList(interfase, implementation);
            }
            default:
                return Collections.emptySet();
        }
    }

    private ObjCMethodFragment getObjectClassInArrayMethodFragment(boolean pkgForced, Supplier supplier, String pkg, Map<String, Property> properties) {
        ObjCMethodFragment objectClassInArrayMethod = new ObjCMethodFragment(Modifier.STATIC);
        objectClassInArrayMethod.setName("mj_objectClassInArray");
        ObjCResultFragment objectClassInArrayResult = new ObjCResultFragment();
        objectClassInArrayResult.setType(ObjCType.valueOf(prefix, HDType.valueOf(new ParameterizedTypeImpl(Map.class, new Class<?>[]{String.class, String.class}))));
        objectClassInArrayMethod.setResultFragment(objectClassInArrayResult);
        BlockFragment objectClassInArrayBlock = new BlockFragment();
        objectClassInArrayBlock.getSentences().add("return @{");
        int count = 0;
        for (Map.Entry<String, Property> entry : (properties != null ? properties.entrySet() : Collections.<Map.Entry<String, Property>>emptySet())) {
            Property property = entry.getValue();
            Schema type = property.getType();
            Category category = type.getCategory();
            Schema component = type.getComponent();
            if (category == Category.ARRAY) {
                while (component.getCategory() == Category.ARRAY) component = component.getComponent();
                ObjCClass componentType = (ObjCClass) component.toType(pkg, pkgForced, supplier);
                CharSequence className = componentType.getSimpleName();
                className = ObjCClass.PRIMARIES.contains(String.valueOf(className)) ? "NSNumber" : className;
                String sentence = "    @\"" + entry.getKey() + "\": @\"" + className + "\"" + (count++ > 0 ? "," : "");
                objectClassInArrayBlock.getSentences().add(1, sentence);
            }
        }
        objectClassInArrayBlock.getSentences().add("};");
        objectClassInArrayMethod.setBlockFragment(objectClassInArrayBlock);
        return count > 0 ? objectClassInArrayMethod : null;
    }

}
