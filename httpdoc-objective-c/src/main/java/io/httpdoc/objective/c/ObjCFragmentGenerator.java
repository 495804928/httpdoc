package io.httpdoc.objective.c;

import io.httpdoc.core.*;
import io.httpdoc.core.fragment.BlockFragment;
import io.httpdoc.core.fragment.ClassFragment;
import io.httpdoc.core.fragment.CommentFragment;
import io.httpdoc.core.fragment.ParameterFragment;
import io.httpdoc.core.generation.*;
import io.httpdoc.core.kit.StringKit;
import io.httpdoc.core.modeler.Archetype;
import io.httpdoc.core.modeler.Modeler;
import io.httpdoc.core.strategy.Strategy;
import io.httpdoc.core.strategy.Task;
import io.httpdoc.core.supplier.Supplier;
import io.httpdoc.core.type.HDClass;
import io.httpdoc.core.type.HDType;
import io.httpdoc.objective.c.core.ObjCDocument;
import io.httpdoc.objective.c.fragment.ObjCClassFragment;
import io.httpdoc.objective.c.fragment.ObjCMethodFragment;
import io.httpdoc.objective.c.fragment.ObjCParameterFragment;
import io.httpdoc.objective.c.fragment.ObjCResultFragment;
import io.httpdoc.objective.c.type.ObjCBlockType;
import io.httpdoc.objective.c.type.ObjCClass;
import io.httpdoc.objective.c.type.ObjCType;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class ObjCFragmentGenerator implements Generator {
    private final static String DEFAULT_PREFIX = "HD";
    private final String prefix;
    private final Modeler<ObjCClassFragment> modeler;

    public ObjCFragmentGenerator() {
        this(DEFAULT_PREFIX);
    }

    public ObjCFragmentGenerator(String prefix) {
        this(prefix, new ObjCMJExtensionModeler(prefix));
    }

    public ObjCFragmentGenerator(Modeler<ObjCClassFragment> modeler) {
        this(DEFAULT_PREFIX, modeler);
    }

    public ObjCFragmentGenerator(String prefix, Modeler<ObjCClassFragment> modeler) {
        this.prefix = prefix;
        this.modeler = modeler;
    }

    @Override
    public void generate(Generation generation) throws IOException {
        Document document = generation.getDocument() != null ? new ObjCDocument(prefix, generation.getDocument()) : null;
        if (document == null) return;
        Map<String, Schema> schemas = document.getSchemas() != null ? document.getSchemas() : Collections.<String, Schema>emptyMap();
        Set<Controller> controllers = document.getControllers() != null ? document.getControllers() : Collections.<Controller>emptySet();
        String directory = generation.getDirectory();
        Strategy strategy = generation.getStrategy();
        Collection<ClassFragment> fragments = new LinkedHashSet<>();
        for (Schema schema : schemas.values()) fragments.addAll(generate(new SchemaGenerateContext(generation, schema)));
        for (Controller controller : controllers) fragments.addAll(generate(new ControllerGenerateContext(generation, controller)));
        Collection<Claxx> classes = new LinkedHashSet<>();
        for (ClassFragment fragment : fragments) {
            ObjCClass clazz = (ObjCClass) fragment.getClazz();
            String className = clazz.getIntactName();
            String extension = clazz.getCategory() == HDClass.Category.CLASS ? ".m" : ".h";
            String classPath = File.separator + className.replace(".", File.separator) + extension;
            Claxx claxx = new Claxx(classPath, fragment, Preference.DEFAULT);
            classes.add(claxx);
        }
        Task task = new Task(directory, classes);
        strategy.execute(task);
    }

    protected Collection<ObjCClassFragment> generate(SchemaGenerateContext context) {
        Document document = context.getDocument();
        String pkg = context.getPkg();
        boolean pkgForced = context.isPkgForced();
        Supplier supplier = context.getSupplier();
        Schema schema = context.getSchema();
        Archetype archetype = new Archetype(document, pkg, pkgForced, supplier, schema);
        return modeler.design(archetype);
    }

    protected Collection<ObjCClassFragment> generate(ControllerGenerateContext context) {
        Generation generation = context.getGeneration();
        String pkgGenerated = context.getPkg();
        boolean pkgForced = context.isPkgForced();
        Controller controller = context.getController();
        String comment = "Generated By Httpdoc";
        String name = controller.getName();
        String pkgTranslated = controller.getPkg();
        String pkg = pkgForced || pkgTranslated == null ? pkgGenerated : pkgTranslated;

        ObjCClassFragment interfase = new ObjCClassFragment();
        interfase.setPkg(pkg);
        interfase.setCommentFragment(new CommentFragment(controller.getDescription() != null ? controller.getDescription() + "\n" + comment : comment));
        interfase.setClazz(new ObjCClass(prefix, new HDClass(HDClass.Category.INTERFACE, pkg + "." + name)));

        ObjCClassFragment implementation = new ObjCClassFragment();
        implementation.setPkg(pkg);
        implementation.setCommentFragment(new CommentFragment(controller.getDescription() != null ? controller.getDescription() + "\n" + comment : comment));
        implementation.setClazz(new ObjCClass(prefix, new HDClass(HDClass.Category.CLASS, pkg + "." + name)));

        List<Operation> operations = controller.getOperations() != null ? controller.getOperations() : Collections.<Operation>emptyList();
        for (Operation operation : operations) {
            Collection<ObjCMethodFragment> methods = generate(new OperationGenerateContext(generation, controller, operation));
            if (methods == null) continue;
            for (ObjCMethodFragment method : methods) interfase.getMethodFragments().add(method.signature());
            implementation.getMethodFragments().addAll(methods);
        }

        return Arrays.asList(interfase, implementation);
    }

    protected Collection<ObjCMethodFragment> generate(OperationGenerateContext context) {
        Operation operation = context.getOperation();
        ObjCMethodFragment method = new ObjCMethodFragment();
        method.setComment(operation.getDescription());
        Result result = operation.getResult();
        String comment = result != null ? result.getDescription() : null;
        method.setResultFragment(new ObjCResultFragment(null, comment));
        method.setName(operation.getName());
        Generation generation = context.getGeneration();
        Controller controller = context.getController();
        List<Parameter> parameters = operation.getParameters() != null ? operation.getParameters() : Collections.<Parameter>emptyList();
        Collection<ObjCParameterFragment> fragments = generate(new ParameterGenerateContext(generation, controller, operation, parameters));
        method.getParameterFragments().addAll(fragments);

        String pkg = context.getPkg();
        boolean pkgForced = context.isPkgForced();
        Supplier supplier = context.getSupplier();
        HDType type = result != null && result.getType() != null
                ? result.getType().isVoid()
                ? null
                : result.getType().isPrimitive()
                ? result.getType().toWrapper().toType(pkg, pkgForced, supplier)
                : result.getType().toType(pkg, pkgForced, supplier)
                : null;
        HDType returnType = type != null ? type : ObjCType.valueOf(prefix, HDType.valueOf(ID.class));

        Map<String, HDType> map = new LinkedHashMap<>();
        map.put("success", ObjCType.valueOf(prefix, HDType.valueOf(boolean.class)));
        map.put("result", returnType);
        map.put("error", ObjCType.valueOf(prefix, HDType.valueOf(Error.class)));
        ObjCBlockType callback = new ObjCBlockType(map);
        ObjCParameterFragment success = new ObjCParameterFragment();
        success.setType(callback);
        success.setName("callback");
        method.getParameterFragments().add(success);

        method.setBlockFragment(new BlockFragment());

        return Collections.singleton(method);
    }

    protected Collection<ObjCParameterFragment> generate(ParameterGenerateContext context) {
        String pkg = context.getPkg();
        boolean pkgForced = context.isPkgForced();
        Supplier supplier = context.getSupplier();
        List<Parameter> parameters = context.getParameters();
        Collection<ObjCParameterFragment> fragments = new LinkedHashSet<>();
        for (int i = 0; parameters != null && i < parameters.size(); i++) {
            Parameter parameter = parameters.get(i);
            ObjCParameterFragment fragment = new ObjCParameterFragment();
            String name = StringKit.isBlank(parameter.getName()) ? parameter.getType().toName() : parameter.getName();
            loop:
            while (true) {
                for (ParameterFragment prev : fragments) {
                    if (name.equals(prev.getName())) {
                        name = String.format("_%s", name);
                        continue loop;
                    }
                }
                break;
            }
            fragment.setName(name);
            fragment.setComment(parameter.getDescription());
            fragment.setType(parameter.getType().toType(pkg, pkgForced, supplier));
            fragments.add(fragment);
        }
        return fragments;
    }

}
