package io.httpdoc.objc;

import io.httpdoc.core.Constant;
import io.httpdoc.core.Schema;
import io.httpdoc.core.exception.SchemaDesignException;
import io.httpdoc.core.fragment.Fragment;
import io.httpdoc.core.modeler.Archetype;
import io.httpdoc.core.modeler.Modeler;
import io.httpdoc.core.supplier.Supplier;
import io.httpdoc.objc.fragment.CommentFragment;
import io.httpdoc.objc.fragment.EnumImplementationFragment;
import io.httpdoc.objc.fragment.EnumInterfaceFragment;

import java.util.Collection;
import java.util.Collections;
import java.util.Set;

/**
 * @author 杨昌沛 646742615@qq.com
 * @date 2018-07-25 16:37
 **/
public class MJExtensionModeler implements Modeler<Fragment> {
    private final String prefix;

    public MJExtensionModeler(String prefix) {
        this.prefix = prefix;
    }

    /**
     * 设计
     *
     * @param archetype 原型
     * @return 模型
     * @throws SchemaDesignException Schema 不可设计的异常
     */
    @Override
    public Collection<Fragment> design(Archetype archetype) throws SchemaDesignException {
        final String comment = "Generated By Httpdoc";
        final String pkgGenerated = archetype.getPkg();
        final boolean pkgForced = archetype.isPkgForced();
        final Supplier supplier = archetype.getSupplier();
        final Schema schema = archetype.getSchema();
        final String pkgTranslated = schema.getPkg();
        final String pkg = pkgForced || pkgTranslated == null ? pkgGenerated : pkgTranslated;
        final String name = schema.getName();

        switch (schema.getCategory()) {
            case ENUM:
                EnumInterfaceFragment interfase = new EnumInterfaceFragment();
                interfase.setName(prefix + name);
                interfase.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                Set<Constant> constants = schema.getConstants();
                for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                    interfase.addExportFragment(constant.getDescription(), prefix + name + constant.getName());
                }

                EnumImplementationFragment implementation = new EnumImplementationFragment();
                implementation.setName(prefix + name);
                implementation.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                    implementation.addAssignFragment(constant.getDescription(), prefix + name + constant.getName(), constant.getName());
                }


                break;
            case OBJECT:
                break;
            default:
                return Collections.emptySet();
        }

        return null;
    }

}
