package io.httpdoc.objc;

import io.httpdoc.core.Category;
import io.httpdoc.core.Constant;
import io.httpdoc.core.Property;
import io.httpdoc.core.Schema;
import io.httpdoc.core.exception.SchemaDesignException;
import io.httpdoc.core.modeler.Archetype;
import io.httpdoc.core.modeler.Modeler;
import io.httpdoc.core.supplier.Supplier;
import io.httpdoc.objc.core.ObjCSchema;
import io.httpdoc.objc.foundation.NSDictionary;
import io.httpdoc.objc.foundation.NSObject;
import io.httpdoc.objc.foundation.NSString;
import io.httpdoc.objc.fragment.*;
import io.httpdoc.objc.type.ObjCClass;
import io.httpdoc.objc.type.ObjCParameterizedType;
import io.httpdoc.objc.type.ObjCType;

import java.util.*;

/**
 * @author 杨昌沛 646742615@qq.com
 * @date 2018-07-25 16:37
 **/
public class MJExtensionModeler implements Modeler<ObjCFile> {
    private final String prefix;

    public MJExtensionModeler(String prefix) {
        this.prefix = prefix;
    }

    /**
     * 设计
     *
     * @param archetype 原型
     * @return 模型
     * @throws SchemaDesignException Schema 不可设计的异常
     */
    @Override
    public Collection<ObjCFile> design(Archetype archetype) throws SchemaDesignException {
        final String comment = "Generated By Httpdoc";
        final String pkgGenerated = archetype.getPkg();
        final boolean pkgForced = archetype.isPkgForced();
        final Schema schema = archetype.getSchema();
        final String pkgTranslated = schema.getPkg();
        final String pkg = pkgForced || pkgTranslated == null ? pkgGenerated : pkgTranslated;
        final String name = schema.getName();
        final Supplier supplier = archetype.getSupplier();

        switch (schema.getCategory()) {
            case ENUM: {
                EnumInterfaceFragment interfase = new EnumInterfaceFragment();
                interfase.setName(prefix + name);
                interfase.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                Set<Constant> constants = schema.getConstants();
                for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                    interfase.addExportFragment(constant.getDescription(), prefix + name + constant.getName());
                }

                EnumImplementationFragment implementation = new EnumImplementationFragment();
                implementation.setName(prefix + name);
                implementation.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                for (Constant constant : (constants != null ? constants : Collections.<Constant>emptySet())) {
                    implementation.addAssignFragment(constant.getDescription(), prefix + name + constant.getName(), constant.getName());
                }

                return Arrays.asList(
                        new ObjCFile(pkg, prefix + name, ObjCFile.Type.INTERFACE, interfase),
                        new ObjCFile(pkg, prefix + name, ObjCFile.Type.IMPLEMENTATION, implementation)
                );
            }
            case OBJECT: {
                ClassInterfaceFragment interfase = new ClassInterfaceFragment();
                interfase.setName(prefix + name);
                interfase.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));
                ObjCSchema superclass = (ObjCSchema) schema.getSuperclass();
                interfase.setSuperclass(superclass != null ? (ObjCClass) superclass.toObjCType(supplier) : ObjCType.valueOf(NSObject.class));
                Map<String, Property> properties = schema.getProperties();
                for (Map.Entry<String, Property> entry : (properties != null ? properties.entrySet() : Collections.<Map.Entry<String, Property>>emptySet())) {
                    Property property = entry.getValue();
                    PropertyFragment propertyFragment = new PropertyFragment();
                    propertyFragment.setName(entry.getKey());
                    ObjCSchema type = (ObjCSchema) property.getType();
                    propertyFragment.setType(type.toObjCType(supplier));
                    propertyFragment.setCommentFragment(new CommentFragment(property.getDescription()));
                    interfase.addPropertyFragment(propertyFragment);
                }

                ClassImplementationFragment implementation = new ClassImplementationFragment();
                implementation.setName(prefix + name);
                implementation.setCommentFragment(new CommentFragment(schema.getDescription() != null ? schema.getDescription() + "\n" + comment : comment));

                SelectorFragment objectClassInArrayMethod = getObjectClassInArrayMethodFragment(properties);
                if (objectClassInArrayMethod != null) implementation.addSelectorFragment(objectClassInArrayMethod);

                SelectorFragment replacedKeyFromPropertyNameMethod = getReplacedKeyFromPropertyNameMethodFragment(properties);
                if (replacedKeyFromPropertyNameMethod != null) implementation.addSelectorFragment(replacedKeyFromPropertyNameMethod);

                return Arrays.asList(
                        new ObjCFile(pkg, prefix + name, ObjCFile.Type.INTERFACE, interfase),
                        new ObjCFile(pkg, prefix + name, ObjCFile.Type.IMPLEMENTATION, implementation)
                );
            }
            default:
                return Collections.emptySet();
        }
    }

    private SelectorFragment getReplacedKeyFromPropertyNameMethodFragment(Map<String, Property> properties) {
        SelectorFragment selector = new SelectorFragment();
        selector.setInstantial(false);
        selector.setName("mj_replacedKeyFromPropertyName");
        ResultFragment objectClassInArrayResult = new ResultFragment();
        objectClassInArrayResult.setType(new ObjCParameterizedType(ObjCType.valueOf(NSDictionary.class), ObjCType.valueOf(NSString.class), ObjCType.valueOf(NSString.class)));
        selector.setResultFragment(objectClassInArrayResult);
        BlockFragment block = new BlockFragment();
        block.getSentences().add("return @{");
        int count = 0;
        for (Map.Entry<String, Property> entry : (properties != null ? properties.entrySet() : Collections.<Map.Entry<String, Property>>emptySet())) {
            Property property = entry.getValue();
            String name = entry.getKey();
            String alias = property.getAlias();
            if (alias == null || alias.equals(name)) continue;
            String sentence = "    @\"" + alias + "\": @\"" + name + "\"" + (count++ > 0 ? "," : "");
            block.addSentence(1, sentence);
        }
        block.getSentences().add("};");
        selector.setBlockFragment(block);
        return count > 0 ? selector : null;
    }

    private SelectorFragment getObjectClassInArrayMethodFragment(Map<String, Property> properties) {
        SelectorFragment selector = new SelectorFragment();
        selector.setInstantial(false);
        selector.setName("mj_objectClassInArray");
        ResultFragment objectClassInArrayResult = new ResultFragment();
        objectClassInArrayResult.setType(new ObjCParameterizedType(ObjCType.valueOf(NSDictionary.class), ObjCType.valueOf(NSString.class), ObjCType.valueOf(NSString.class)));
        selector.setResultFragment(objectClassInArrayResult);
        BlockFragment block = new BlockFragment();
        block.getSentences().add("return @{");
        int count = 0;
        for (Map.Entry<String, Property> entry : (properties != null ? properties.entrySet() : Collections.<Map.Entry<String, Property>>emptySet())) {
            Property property = entry.getValue();
            Schema type = property.getType();
            Category category = type.getCategory();
            if (category == Category.ARRAY) {
                Schema component = type.getComponent();
                while (component.getCategory() == Category.ARRAY) component = component.getComponent();
                CharSequence className = component.getName();
                className = component.isPrimitive() ? "NSNumber" : className;
                String sentence = "    @\"" + entry.getKey() + "\": @\"" + className + "\"" + (count++ > 0 ? "," : "");
                block.getSentences().add(1, sentence);
            }
        }
        block.getSentences().add("};");
        selector.setBlockFragment(block);
        return count > 0 ? selector : null;
    }

}
